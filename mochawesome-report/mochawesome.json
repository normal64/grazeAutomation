{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2023-05-06T19:52:30.689Z",
    "end": "2023-05-06T19:52:44.631Z",
    "duration": 13942,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b48bd4f0-356a-4caf-9ff4-fc06dace9ef0",
      "title": "",
      "fullFile": "D:\\FrontEnd\\Practice projects\\e-commerce automation\\test\\order.js",
      "file": "\\test\\order.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4d5cd42a-489d-47af-983f-81e92bc82619",
          "title": "task for go phptravels",
          "fullFile": "D:\\FrontEnd\\Practice projects\\e-commerce automation\\test\\order.js",
          "file": "\\test\\order.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "falsy form fields",
              "fullTitle": "task for go phptravels falsy form fields",
              "timedOut": false,
              "duration": 13936,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//create driver\n// Set up the Selenium driver\nconst driver = await new Builder().forBrowser(\"chrome\").build();\n// Navigate to the webpage\ndriver.get(\"https://www.graze.com/uk/\");\nawait driver.manage().window().maximize();\nawait driver\n  .findElement(\n    By.className(\"button button--primary signup-button text-center\")\n  )\n  .click();\nconst boxes = await driver.findElements(\n  By.className(\"button button--secondary button--block\")\n);\nawait boxes[1].click();\n//filling first data page with info\nconst firstName = await driver.findElement(By.id(\"firstName\"));\nconst secondName = await driver.findElement(By.id(\"lastName\"));\nconst email = await driver.findElement(By.id(\"email\"));\nconst password = await driver.findElement(By.id(\"password\"));\nawait driver.findElement(By.id(\"submit-button\")).click();\n//waiting for page to reload because button triggers page refresh and error elements are not present before that\nawait driver.wait(\n  until.stalenessOf(driver.findElement(By.tagName(\"html\")))\n);\n// Find all  elements with the \"help-block\" class\nconst helpBlockElements = await driver.findElements(By.css(\"small\"));\n// Get the second <small> element and output its text content\nconst firstHelpBlockElement = helpBlockElements[0];\n//getting error text for first name\nconst firstHelpBlockText = await firstHelpBlockElement.getAttribute(\n  \"innerText\"\n);\nconsole.log(`firstHelpBlockText`, firstHelpBlockText);\nconst secondHelpBlockElement = helpBlockElements[2];\n//getting error text for second name\nconst secondHelpBlockText = await secondHelpBlockElement.getAttribute(\n  \"innerText\"\n);\nconsole.log(`secondHelpBlockText`, secondHelpBlockText);\nconst emailHelpBlockElement = helpBlockElements[5];\n//getting error text for email\nconst emailHelpBlockText = await emailHelpBlockElement.getAttribute(\n  \"innerText\"\n);\nconsole.log(`emailHelpBlockText1`, emailHelpBlockText);\nconst passwordHelpBlockElement = helpBlockElements[8];\n//getting error text for password\nconst passwordHelpBlockText = await passwordHelpBlockElement.getAttribute(\n  \"innerText\"\n);\nconsole.log(`passwordHelpBlockText1`, passwordHelpBlockText);\n// // Check if the text matches the expected value\n//first name field error\nconst firstNameHelpBlockExpected = \"first name is required\";\nexpect(firstHelpBlockText).to.equal(firstNameHelpBlockExpected);\n//second name field error\nconst secondNameHelpBlockExpected = \"last name is required\";\nexpect(secondHelpBlockText).to.equal(secondNameHelpBlockExpected);\nconst emailHelpBlockExpected = \"This field is required\";\nexpect(emailHelpBlockText).to.equal(emailHelpBlockExpected);\nconst passwordHelpBlockExpected = \"This field is required\";\nexpect(passwordHelpBlockText).to.equal(passwordHelpBlockExpected);\n//fill in correct first, last name but falsy email and password\nconst firstName1 = await driver.findElement(By.id(\"firstName\"));\nconst secondName1 = await driver.findElement(By.id(\"lastName\"));\nconst email1 = await driver.findElement(By.id(\"email\"));\nconst password1 = await driver.findElement(By.id(\"password\"));\nawait firstName1.sendKeys(\"Denis\");\nawait secondName1.sendKeys(\"Poplavskii\");\nawait email1.sendKeys(\"mymai@\");\nawait password1.sendKeys(\"12345\");\nconst submitButton1 = await driver.findElement(By.id(\"submit-button\"));\nconst submitButtonValidationStatus =\n  await submitButton1.getAttribute(\"disabled\");\nconsole.log(`submitButtonValidationStatus`, submitButtonValidationStatus);\nconst submitButtonValidationStatusExpected = 'true';\nexpect(submitButtonValidationStatus).to.equal(submitButtonValidationStatusExpected);\n//filling also email,password field with valid data\nawait email1.sendKeys(\"hots.com\");\nawait password1.sendKeys(\"6\");\nconst submitButtonValidationStatus1 =\n  await submitButton1.getAttribute(\"disabled\");\nexpect(submitButtonValidationStatus1).to.equal(null);\nsetTimeout(async function () {\n  await driver.quit();\n}, 5000);",
              "err": {},
              "uuid": "ea116c66-c969-43f2-a390-c2b720e4e062",
              "parentUUID": "4d5cd42a-489d-47af-983f-81e92bc82619",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ea116c66-c969-43f2-a390-c2b720e4e062"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13936,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}